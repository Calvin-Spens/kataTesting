basddfswffffffasdsf

# Coding out numbers in a base system that depends on factorial,
# rather than powers of numbers. 
# In this system, the last digit is always 0 and is in base 0!.  
# The digit before that is either 0 or 1 and is in base 1!.  
# The digit before that is either 0, 1, or 2 and is in base 2!, etc.  
# More generally, the nth-to-last digit is always 0, 1, 2, ..., n and is in base n!. 
# Read more about it at: http://en.wikipedia.org/wiki/Factorial_number_system 
# 
# Example 
# The decimal number 463 is encoded as "341010", because: 
# 463 = 3×5! + 4×4! + 1×3! + 0×2! + 1×1! + 0×0! 
# If we are limited to digits 0..9, the biggest number we can encode is 
# 10!-1 (= 3628799). So we extend 0..9 with letters A..Z. 
# With these 36 digits we can now encode numbers up to 36!-1 (= 3.72 × 1041) 
# 
# Task 
# We will need two functions. The first one will receive a decimal number  
# and return a string with the factorial representation. 
# The second one will receive a string with a factorial representation  
# and produce the decimal representation. 
# Given numbers will always be positive. 
#
factbase () {
    new_fact=0
    max_fact=1    
    while [ $new_fact -lt $1 ] 
    do 
        high_base=$max_fact
        ((max_fact=max_fact+1))
        new_fact=$(echo $max_fact | dc -e '?[q]sQ[d1=Qd1-lFx*]dsFxp')    
    done
}

dec2FactString (){
    factbase $1
    start_num=$1
    fact_string=""
    for ((i=$high_base; i>=1; i--)) 
    do 
        new_fact=$(echo $i | dc -e '?[q]sQ[d1=Qd1-lFx*]dsFxp')  
        vari=$(expr $start_num / $new_fact)
        start_num=$(($start_num - ($vari * $new_fact)))
        fact_string="$fact_string$vari"
    done
    echo $fact_string"0"
}

#for (( i=1; i <= $1; i++)); do 
dec2FactString $1

# currently this is not finished
# part one works, but Codewars did not like the dc I am thinking
# wanted to move to Python work so I left it for now

