#!/bin/bash
#In DNA strings, symbols "A" and "T" are complements of each other,
#as "C" and "G". You function receives one side of the DNA
#(string, except for Haskell); you need to return the
#other complementary side. DNA strand is never empty
#or there is no DNA at all (again, except for Haskell).
#
#Example
#"ATTGC" --> "TAACG"
#"GTAT" --> "CATA"
#dnaStrand []        `shouldBe` []
#dnaStrand [A,T,G,C] `shouldBe` [T,A,C,G]
#dnaStrand [G,T,A,T] `shouldBe` [C,A,T,A]
#dnaStrand [A,A,A,A] `shouldBe` [T,T,T,T]


#This is the version that I turned in

#dna=$1
#for (( i=0; i<${#dna}; i++))
#do
#  if [[ ${dna:$i:1} == 'A' ]]
#    then comp="${comp}T"
#  elif [[ ${dna:$i:1} == 'T' ]]
#    then comp="${comp}A"
#  elif [[ ${dna:$i:1} == 'C' ]]
#      then comp="${comp}G"
#  elif [[ ${dna:$i:1} == 'G' ]]
#      then comp="${comp}C"
#  fi
#done

#comp=$(echo $1 | tr 'ATCG' 'TAGC')


#This is the one line version that I learned from other examples

echo "dnaStrand [$1] 'shouldBe' [$(echo $1 | tr 'ATCG' 'TAGC')]"
